# Створіть 3 асинхронні функції: task1(), task2(), та task3(). 
# Кожна з цих функцій повинна мати асинхронну затримку, наприклад, за допомогою 
# asyncio.sleep().
# Створіть асинхронну функцію main(), яка викликає ці три функції.
# Запустіть цю основну функцію і спостерігайте порядок виконання задач.

# В коментарях до коду зазначте, в якому порядку викликаються асинхронні задачі.
# Спробуйте різні комбінації виклику функцій в main(), щоб побачити, 
# як змінюється порядок виконання.
# Зверніть увагу на різницю між асинхронним та синхронним виконанням коду.

import asyncio
import random

async def task1():
    print("Початок виконання функції 1...")
    res=1
    for i in range (1,1000000):
        res = res+i*2
    await asyncio.sleep(2)  # Це асинхронна затримка
    print("Функція 1 завершила виконання!")

async def task2():
    print("Початок виконання функції 2...")
    my_list=[random.randint(1,1000000) for n in range(100000)]
    await asyncio.sleep(2)  # Це асинхронна затримка
    print("Функція 2 завершила виконання!")

async def task3():
    print("Початок виконання функції 3...")
    my_list_new=[random.randint(1,1000000) for n in range(900000)]
    my_list_new.sort()
    await asyncio.sleep(2)  # Це асинхронна затримка
    print("Функція 3 завершила виконання!")

async def main():
    await asyncio.gather(
        task2(),
        task3(),
        task1()
    )

asyncio.run(main()) #функції раняться в порядку, який вказаний у main. розумію, 
# що функції мають виконувати інші задачі для наглядності